// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+Ra3W/cuBH/VwheH1pAazlp2od9OeSaa+rirghiH/JgGAZXml0xK5EyOdqPBvu/F/zQ",
	"N3dXdu3WyD3ZEsnhb2Z+nBmO9htNZFFKAQI1nX+jJVOsAARln3JecPxkXpmnFHSieIlcCjqnNxkQURUL",
	"UJrIJeEIhSYoiQKslLigEeVm2kMFak8jKlgBdO4k0ojqJIOCOalLVuVI528vI1qwHS+qgs7/Yh64cA9v",
	"Ior70iznAmEFih4OEZXLpYbz6Hrg9JqXZAFLqYBoZAq5WJn3icxzSJBgBkSBrnIkGvCYEm7nnhYN1ssA",
	"1kM90xr1fYXZZ9ClNbeSJSjkYEe+btH88es1Ki5W9BDRSoPqDMjFV0jQ2kDBQ8UVpHR+62ZFVshdNJwb",
	"0Z+VklYK7FhR5mBRg9ZsZeZdywIwM9bYgkCyVdJt3QfYzB+BHGCpJ4aAfJRylcOnTKIc++09WdlhUtrx",
	"IYAF03BfqXy8sKwWOU8IL8y20diGi7xS9xnT2XipGSJ2KLAuUcDQKDVctc1AEI5kyzRBtgZBI7qUqmBI",
	"5zRlCDPkRRBKBnyV4Viie0/KXVcSF/jXd3RMqojyACiehjbc8hQDetvXE7cb+Nfu0zijtVK9V6NkiABX",
	"YqUg5SACNngvSGd46P6Qyr/9dvUhpLQ7q8PZrXBiJ0RniGwVtTNPa/IBkPH8sfokGc9TBeIUTk0wY0iY",
	"AmJwbVjuJNmYZhb+QcGSzukPcRvJYx9u4s7ehwY/U4rtLYN6jpguR0HCS6dBH/VnN0AULEGBSGx0zbgm",
	"vGuDScidqDHqoX9awSEH/cI1juOsS0Ij9P+QW1IwsffpYgvKJIOHCjRCSpZSOV3KXoTpHEifFkZyUaYy",
	"uMBIuk9kFToINxJZ3klhZq4mbMN4zhY5HJfnlowFfjEs8vLMRO8YHZSEZvep0Jy5WKKk1oTlucN6Poh0",
	"4UZNZdDdOmpTbcdWIUf/Cix/dDZhCPcMnzO0T4/J4fB0LotZPVwonHKIuqn27ElqIl1UG6bZL2TxT2zF",
	"hQn6nVA1Pmq8P/jIoOWjaiB0FYDsnBx7+A+HU9gNbQKoi/r1JLyWey+H8VPj8yHIqeKfnTfHwX5uU8PT",
	"0Xbyy3+bK0ZI/dxAqHC7vkDN4QQfqTci+lAxgRz344Ua1Mak0GbGpLrQrwqkZ1EVpBmdJktWKgmotJBy",
	"TaQiW1hojvAjSaFUkBgG/BjS0QX1gosKQ3WDz5ATAFUilLlrQ9nR6SVdx/Ze8t1Rxhwt8DxvyJZjRnS1",
	"6Nynh1RSDfemsVlDYnbRIYXdiEm/7s7qufuI83LtZJxNDA2K+mCesFItM2AmjVASLvpwn37UBomlv2g3",
	"1RIe77kyWaOqjrni8Xs10oJJ49gZaapTP8Ma0hrVlCg6IqwsldzxgiHke/JHc6bIjBRs7Us9RhQTK/jT",
	"U697NbKBQfquCFFjbOST1x0uCCOaC1O3ee6NK7fUCOebQGhqhwKsYUW4pPXvu2WerHpltq9TDxFdKVYE",
	"/LN1t3cuiJswSdbTGP+429qai2D7giExQ7aC717PQFSFcXobU0J3rBaXtCJD5Xcz0qxaSJkDE22Snx4M",
	"w5F/esSvvWLNEdULW7acZG57ZAPUbQ/DJO4+zucndu4OTjJBd8FYXZdwKsVxf22s7ztuwBSo95VrILmn",
	"v9fE/ueXm7oLar1rR1ssGWLp2p9cLKW7eScgtPW676X+enVjwyDH3Dx+lJVKifM6+cCQLZg2HNyA0k7r",
	"NxeXF5eOdyBYyemc/tm+MndEzCzomHm8pdQB0lxDIkXqgqdcEgNTz+M4hQ3kxlP6wl0bLxJZxDwFWyLE",
	"mq/EjIt4C4t4wZI1iHRm9vlBm/8wgxlPZyjXIGYoZ3tZqZmpS6xBjFRmqZSaZFhh9otcccuNTsP9dgjU",
	"1eEkkSkcaUX7odbVqCroNqaHtLgzk3UphXb+fXt5aTtRUqCPLKwsc55YtPFX7YjXyjt1WJvOtvX5oACo",
	"MCP1ztQO+77/M23u+tuBnSsBuxIShJSAn9Mync5v7yKqq6Jgat9a3HqHJCzPjacNo5kpqG+pcbjhg4NI",
	"74yseFCLrFwTqO9zc7fp3pRHng/p1k6Ju187DtHZ6Z0vNy/q8mAXIOR+13Pq5Rr/pUXbbjFL/Ten3UzA",
	"LtQZJjkXa4LSFj5mTiOy1e4U8w//f9I1NDNssK0y3qNEzbJeRWWu7z6M9Sn1N9t075PK9yt/kun+2ZTs",
	"lhNjTR0KU152PLvYk5Ltc8nSC3LlrigmxcUmahHYcY06IhydbfQogB1GjH3zP9LmX7DN98R/zujWRa+I",
	"PM7iPYMf5Y4JT00362hgcm2w7y0kOa1OBiNnmtcYGArvktqt7tk5tO3mHfWobxp+by71ap30qbfOa3Rq",
	"WXul9mrdX7du7bQ9j/q17q9+b46t9Trq2ZTYFolL97UNfrdlQ2uCmkn1m3PlQkuglygVer3Sk8WC75q+",
	"4kLhnC79UkE1jYpXVyY0jZwxVzphJ/7m/rnn6eFoCPoIPgL9tL9Kz91ebzIgPO23qP0vxBSHTXOlNdf2",
	"9kbboHg119pzRPi59kKNwCjJyIblPK1/QPCaiHElltL+nIERXULClzw5yZH+dbnfErq9M6Z3fQ7HAfvr",
	"LNv6mcdxLhOWZ1Lj/N3bd29jVnI6BIvOOt2Feh7HSynTC8GT9V5DAeLfzDZjQgJKJVN6uDv8JwAA//+G",
	"f0WkyygAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
