// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/bulk", wrapper.GetFoodsByIds)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
