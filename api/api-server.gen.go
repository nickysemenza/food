// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
