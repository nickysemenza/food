// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
