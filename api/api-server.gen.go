// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET("/foods/bulk", wrapper.GetFoodsByIds)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
