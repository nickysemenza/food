// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
