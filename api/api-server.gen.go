// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
