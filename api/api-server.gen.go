// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d7v/BQAA//9oP1L9ujAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
