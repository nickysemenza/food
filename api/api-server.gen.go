// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//6e0vxbGOAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
