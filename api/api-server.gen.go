// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5MD/S+xAJgSgkILiw8PhfwEAAP//HQsptUI6AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
