// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//8X0KcezDgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
