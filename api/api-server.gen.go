// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, true, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+gyGZh5ZAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
