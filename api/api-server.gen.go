// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bJcuRqBWMqf72/3/AgAA//9CY9zaAjAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
