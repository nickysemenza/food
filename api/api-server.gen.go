// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//7EFYXT7JwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
