// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
