// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QgpKJVN6uj/9JwAA//8IXHmm9icAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
