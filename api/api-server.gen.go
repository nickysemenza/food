// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//8hBYmLVDUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
