// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
