// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
