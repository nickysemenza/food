// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
