// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/bulk", wrapper.GetFoodsByIds)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HyMN/Chsvf/Nw/8EAAD//wGXF05XXQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
