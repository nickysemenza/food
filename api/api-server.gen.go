// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
