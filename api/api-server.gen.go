// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hIbtTqaxb26bvwIAAP//7dpybhEdAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
