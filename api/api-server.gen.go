// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RaTW8bNxP+KwTf99ACG8tx0h50CZomSA00hZEm6CEwjNHuSGK8S67JWctqoP9e8GO/",
	"KWmdxq2RnhItydlnvp4ZjvczT1VRKomSDJ9/5iVoKJBQu1+5KARd2Ef2V4Ym1aIkoSSf8/drZLIqFqgN",
	"U0smCAvDSDGNVGl5whMu7LabCvWWJ1xCgXzuJfKEm3SNBXipS6hy4vOz04QXcCeKquDzH+wPIf2Ppwmn",
	"bWmPC0m4Qs13u4Sr5dLgcXQ9cOZalGyBS6WRGQJNQq7s81TlOabEaI1Mo6lyYgZpnxL+zT0tGqynEay7",
	"eqcz6mutlXa21qpETQLd41RlaP9dKl0A+fPPzvhYXMILNAZWbndYNKSFXDmzaLyphMaMzz96me3+y0aY",
	"WnzClKysN0qtcrxYK1JjK/7EVm6ZlW49GUBegMGrSufjg2W1yEXKRGFfmwxRJjzVCGQxDg9u1iiZILYB",
	"wwiuUfKktUgGhE9IFFGRIiJNZOOdAxO5LY0iLbKYrc7lSmMmUFLEVJJ1loeWioH78OH8VUwRH2TD3a1w",
	"5jZM0svtPKzJKyQQ+X31SdcizzTKQzgNozUQA43M4rqF3EtyyWgP/l/jks/5/2YtBc1Cnsw67941+EFr",
	"2Dpf9xwxXY7GVJRegz7qd36BaVyiRpk6WlgLw0TXBpOQe1Fj1EP/tIJjDvpVGBpzhGfPEfpf1IYVILeB",
	"5zaoLYvdVGgIM7ZU2utS9pKxwyeBz0ZySWUqesBKukpVFUuE94og73Cv3WsY3ILIYZHjfnn+yFjgHzaK",
	"gjy7MTjGRCWRfftUaN5ckGplDIM891h5tNp0fdeFmzQlrfvqpK0RHVvFHP0WIb838QLhFdC/wZ776OkY",
	"4Ts9PBVOSaJuVTqaSQ3TJbVhmvfFLH4BKyEtx3eoapxqor94T9IKrBqhrgIJjslxyb/bHcJuwyaCuqgf",
	"T8LrYu/hMF40Ph+CnCr+q8fNfrDv2tLw5Wg79eXv1ooR0rA3QhX+rQ/Qc3jBe/qNhN9UIEnQdnzQoL61",
	"JbTZkfTa2h+fR7k7nIqUZ1kVrFmdJktVOo2otFDqminNNrgwgvAFy7DUmNoIeBHT0ZN6IWRFsb4hVMgJ",
	"gCoZq9y1odzq9JauY/sg+XJvxOxt8ELcsI2gNTPVonMRHIaSbmJvWjQbTO1bTExhv2LLr79shdi9R778",
	"7mUcLQwNijoxD1iplhkxkyEsmZB9uF+eaoPC0j90N9USAe+xNtmQrva54v7vaqRFi8a+HGm607DDGdIZ",
	"1bYoJmFQllrdiQII8y37zuYUe8IKuA6tHjANcoXfT0m0WMrUyAYG6bsiFhpjIx+87gjJgBkhbd8WYm/c",
	"uWVWuLiNUFO7FIkaKOItbXjebfNU1WuzQ5+6S/hKQxHxzwbFak0Wvd8wSdaXRfz9bmvXQkYnBEDMLrkO",
	"vns9Q1kV1uktp8TuWC0u5UTG2u9mpTm1UCpHkG2Rn06Gceafzvi1V5w5kvpgGy0HI7dN2UjotskwKXbv",
	"5/MDb+4uTjJB98BY3Z1731L5G3KK0jjvhGHd2/P3jq4E5fbnG1XpjHnvsFdAsABjY+UWtfHonp6cnpz6",
	"+EAJpeBz/sw9snc5WjtTzAYsvvLXZ2stcIbP+Nzd4bt3jKQ3Xf0Yj592y6w74NwlR7d3hrW7S2tEUypp",
	"vOvOTk/9jFFSSEMoy1ykDuzsk/FeaseZhyI7en9yThhWTndb72VpGK5aW6wRsjBmvnsi8S42U2O5kNeM",
	"lCsZdk8jstWuO4UdhpIHFebLX0l9P76N6FtJvCsxJcwYhj0JN1VRgN6GaHBDhm7o2BuOMpHY+dmNIfvR",
	"E0Y6L1W2/WradBl3rJJHYStwx4WLLSthmyvITti57+IsC8xsvjG8E4ZMwgR5I9S4fTqTrnA3Cs2n/5A2",
	"v+Em37Iw4O2WjkcUJd7iPYNbigR7K/rYb1jswVlz4d/LQH5S8K1xj9fqIOt40zxGBgjIrP/a+cZeB4Yx",
	"yrfmwaDWQRcG6zxGH9bQrBM7Y5+9XqznS9+aG2u99voxY+6K6It2bYP/bPFvTVBzev3k8kgv0AbQQ/QB",
	"vVnRwU4gTI0ecRdwTJd+H6Cbi9qj6wGai+w4Vjq0M/vs/3Mlst1eCnqDgYFebs+zMQmNP54QWX9EFz7t",
	"0AJvsf4swl6H2q8iGhQjZx/K0ockqWOB8Lr2Qo3AKgnsFnKR1X9AfUyBcS6Xyv05F5gpMRVLkR6MkTBT",
	"r53svtTga6JyPpvlKoV8rQzNn589P5vZe+4QDXn1uwfNfDZbKpWdSJFebw0WKP+Ek1QVUQGlVhnfXe7+",
	"CgAA///+0tODZSQAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
