// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X2YbdTECtZI53d3t/hcAAP//tx0D9vYwAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
