// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RbX2/kthH/KgTThwSQLeea9mFfAqdJUxdJcbAN3MPBcLjS7IpnidSRI6+3h/3uBf9I",
	"olbUruzzBYvrk1ciORzO/Dh/5U80k1UtBQjUdPGJ1kyxChCUfSp5xfGteWWectCZ4jVyKeiC3hZARFMt",
	"QWkiV4QjVJqgJAqwUeKcJpSbaR8bUFuaUMEqoAtHkSZUZwVUzFFdsaZEunhzkdCKPfGqqejib+aBC/fw",
	"fUJxW5vlXCCsQdHdzlE8wJsGprKC2P3Jt2byd1NM2T8JVfCx4QpyukDVQMij312j4mJtN5erlYbjohlI",
	"Rj/wmixhJRUQjUwhF2vzPpNlCRkSLIAo0E2JRANOMet2HoiwE9RFRFC7dqbV6GWDxTXo2upayRoUcrAj",
	"HzYYOWpCGw0qGJDLD5ChlUEvr/duVmKJ3CX7cxP6i1LSUoEnVtUlWK5Ba7Y2825kBVgYaWxAINko6bYe",
	"MtjNj+kj5KWdGGPkVynXJbwtJMqx3i7J2g6T2o7vM7BkGu4bVY4X1s2y5Bnhldk2GctwWTbqvmC6GC81",
	"Q8QORdZlChiaQ+2v2hQgCEeyYZogewBBE7qSqmJIFzRnCGfIqygrBfB1gWOK7j2pn0JKXODff6BjUCWU",
	"R5jieWzDDc8xcm77euZ2e/q1+3TK6KXU7tUd8ggA9GW5bCLXlwnCzAjJpEDGhQHmH8G6P0bImC+NWsm8",
	"yXACRsFgZC1ydDdnuMq9TqI3N2M6sqIdSI5cJHcET37IXEsiJuIrsVaQcxARmF0KEgy/XI7OGO7P7UkT",
	"b9NnHNDOPHyOnwEZL597mqzgZa5AHOJTEywYEqaAGL4eWekoWadhFv5FwYou6Ddp76dTb8/TYO9dxz9T",
	"im3tFR2oYT4dBRmv3QmGXF+7AaJgBQpEZt1XwTXhoQxmce5Ijbne109POKag37jGsSNzIcaI+3/JDamY",
	"2Hp/vAFlvO3HBjRCTlZSubPUAxMeWDzvd8fXT+YyusBQus9kE7sGtxJZGcQIZq4m7JHxki1LmKbnlowJ",
	"vjMo8vTMRK8YHaWEZve5rDlxsUxJrQkrS8frcSsdspt0cV+4ddLHMoGsYor+HVj5bHfNEO4Zvqbv/Fzz",
	"dCxMsOdwhnDOJQpjmaM3qbN0SSuYbr+YxN+yNRfGqwamanzV+HDwmUbLW9WI6aoA2TE69vLvdod4N7CJ",
	"cF21r2fxa7H35Xh82+l8n8m55F8dN9PMXveu4eXcBv7lc33FiFM/N2Iq3K6fEXFwfV8yBI33j6C0nRmx",
	"LFgYq6mIkGhsDNc2q6ukRsOBCUza1d0WSylLYGLabDjWJyKahH5smECO2/FCDerROOluxqzQ3q+KBACi",
	"qUg3Oo+WbFQWOdJSygcjpg0sNUf4keRQK8gMxn6Mhr7WbVRcNBiLTLwPnsFQI2KxQSsoOxrZflLjfsD4",
	"SZe9e5C9KKXxCg60Zfm5m8T5DWQYZeuSaISacDHk6sXQH5r54ZKnuTGf5/ZY0KpRNXbiq+zVUYua8Ck8",
	"dbGin2HFaEVqAgadEFbXSj7xiiGUW/KtwR85IxV78IEXI4qJNXz3Uii0nO0JZKiKaWC8U6yuY2FiawfJ",
	"hmNBdLMMqn/7+Mi7pGeedZ6PJw1TCm5HRhfqGZ6ivRXHQqKOi6Q9qj1DTKo3tpZ4bWtz0dvmao2+eLdx",
	"0k/IpuBZ0VYRwjRJEyZy0jrC5HBUNa4thhNeJVWcTPluOx3o5ymhReAsrz22DAczZi4II5oLE/p7JY6D",
	"/9wQ548R39MPRaDJqnhW5N+HmYJsBpmaT3V2CV0rVkVkuXEVNi6ImzCL1kuM9POw8MBFtMDIkJghmwKG",
	"+T2IpjLXp7+asSS950takrH8rRuJhUKqi+TmWZ+4Y4879JjFbXVixZG0C3us3B3Cbe9lIsDt7fcs5D5H",
	"4wf2DQdnCSBcMD6ss9qN4ri9MbL3FXFgCtRl4wq87umfLaj//e627VJY3drRnpcCsXbtCS5W0hVuMhCu",
	"Xul7Hb9f3QaFT/qrbFROnM7JzwzZ0lUxu/CMfn9+cX7hUAeC1Zwu6F/tq4TWDAvLdGqLu/bn2hV0jPiZ",
	"1WROF7aqdFmWl26WkZSupdDuxG8uLmxpTwr0N43Vdckzuzz9oJ0q+tbMnlXqdh6b2ZJrNJeNtfs+N5fz",
	"5ewZFte82nNhZdlXnzwLZKVk5Uss1K7wjbpnHP8Q664nFGGmEfBUQ4aQE/BzEqqbqmJq6/VjC1GdpJCZ",
	"bOV9K947Mz9lHpW11BHDcAOZFLmL6eSKGDDqRZrm8Ail0Zg+dwc/z2SV8hxsRJ5qvhZnXKQbWKZLlj2A",
	"yM/MPt9o8wsLOOP5GcoHEGcoz7ayUWcmtbCwH4LM3Jnf5Jrb+x/0XN/vM+oUTDKZw0RD0A/N717efSam",
	"Dym16y/GQNagjZHszieAKG/P6OL9XYgvL3GrHZKxsjSaDlHWYGHw4Fj0aNuL2SYNy9UgdNvTfOxs/ZQ0",
	"7DnvkqPTg+b9F1V5tFQYU78rTA/iCR8ya9uzY7n/7ODpTMBTNNAuuXggKG1uYOZ0JPvTHUL+7hTN2DCa",
	"b1E2SPR2SWfGhpD6h219DkHlmxo/yXz7aocMQ8bxSR0XJusNNLvckpptS8nyc3Llsjmep8ZmEXjiGnVC",
	"ODrJ6JH52o3w+v2fdJb/wKbcEt9SDiPfE4KOk/dA3JPI2TNO6af+4Z7nuzST4hEU3qO870PuCbC5qb38",
	"buV1V1o65MNszpq3Of2wW2j7Isx27b0/GzD4mY7t9VDTZhqTiHHCOV3MOP40YSK8pSgJ8xl+Qpo6Z/aj",
	"JGOWfNpPcqhB5OatFITbz5JapAWVgRHmuibLpCt03ZmvzQm6Ux10f040p+iKKq+SVsHu2Sm0bzJNatT3",
	"sr42lfpjHdSpl84pKrVutdJqtW37WrUGpb9JvV73hcqvSrHtuSY1mxObQ7sAs5XB/22g2otg3wEcC1B7",
	"AH2J4HSv4nwoPvXdj5ONTY8eZRieqq78eXKhaVceHmMlMDvpJ/fDhKKTJuhX8Bbop+1V/rxY0+vbfZau",
	"ODxCPObsuDiZQspRJPzSqqFlwcVyj6zkefth2ykh40qspP3MjhFdQ8ZXPDsGEtdWm8SF68r9mV7p+Oz+",
	"nxK+KDoGDcmILm7ChuRJhSUdZy67YCKfUQBJQmAMS3fDJsT7OyN2V3N1YLAfWttmwyJNS5mxspAaFz+8",
	"+eFNympO99lHd23ChXqRpisp83PBs4ethgrEf5ktDMcI1ErmdHe3+18AAAD//0XIEYhaMwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
