// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET("/foods/bulk", wrapper.GetFoodsByIds)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
