// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET("/foods/bulk", wrapper.GetFoodsByIds)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/3Vdke61ZgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
