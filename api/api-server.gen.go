// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, true, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
