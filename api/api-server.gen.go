// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameter("simple", false, "fdc_id", ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameter("simple", false, "ingredient_id", ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameter("simple", false, "meal_id", ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/albums", wrapper.ListAllAlbums)
	router.POST("/auth", wrapper.AuthLogin)
	router.GET("/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET("/foods/bulk", wrapper.GetFoodsByIds)
	router.GET("/foods/search", wrapper.SearchFoods)
	router.GET("/foods/:fdc_id", wrapper.GetFoodById)
	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST("/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST("/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST("/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET("/meals", wrapper.ListMeals)
	router.GET("/meals/:meal_id", wrapper.GetMealById)
	router.PATCH("/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET("/photos", wrapper.ListPhotos)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET("/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/fk3D/8XAAD//0tB6iAwZAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
