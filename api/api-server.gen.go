// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/ingredients", wrapper.ListIngredients)
	router.POST("/ingredients", wrapper.CreateIngredients)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NGx3Mo19c9v8FQAA//9zpmi7Cx0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
