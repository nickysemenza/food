openapi: "3.0.0"
info:
  version: 1.0.0
  title: Gourd Recipe Database
  license:
    name: MIT
servers:
  - description: test
    url: http://localhost:4242/api
  - description: prod
    url: https://food.nickysemenza.com/api
paths:
  /photos:
    get:
      summary: List all photos
      operationId: list_photos
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: A page of photos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPhotos"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /meals:
    get:
      summary: List all meals
      operationId: list_meals
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: A page of meals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMeals"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ingredients:
    get:
      summary: List all ingredients
      operationId: list_ingredients
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: A page of ingredient results
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedIngredients"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a ingredient
      operationId: create_ingredients
      tags:
        - ingredients
      requestBody:
        description: Creates a ingredient by payload. If the UUID/name exists, it errors
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
      responses:
        "201":
          description: Newly created ingredient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /recipes:
    get:
      summary: List all recipes
      operationId: list_recipes
      tags:
        - recipes
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: A paged array of recipes
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRecipes"
          # content:
          #   application/json:
          #     schema:
          #       allOf:
          #         - $ref: "#/components/schemas/List"
          #         - type: object
          #           properties:
          #             items:
          #               # type: object
          #               # items:
          #               $ref: "#/components/schemas/Recipes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a recipe
      operationId: create_recipes
      tags:
        - recipes
      requestBody:
        description: Creates a recipe by payload. If the UUID/name exists, it errors
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipeDetail"
      responses:
        "201":
          description: Newly created recipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDetail"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /recipes/{recipe_id}:
    get:
      summary: Info for a specific recipe
      operationId: get_recipe_by_id
      tags:
        - recipes
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: The id of the recipe to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDetail"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    # put:
    #   summary: Update a recipe
    #   operationId: update_recipe_by_id
    #   tags:
    #     - recipes
    #   parameters:
    #     - name: recipe_id
    #       in: path
    #       required: true
    #       description: The id of the recipe to retrieve
    #       schema:
    #         type: string
    #   responses:
    #     "200":
    #       description: Expected response to a valid request
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/RecipeDetail"
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/Error"
components:
  schemas:
    SectionIngredient:
      description: Ingredients in a single section
      type: object
      required:
        - id
        - grams
        - kind
        - unit
        - adjective
      properties:
        id:
          description: UUID
          type: string
        kind:
          description: what kind of ingredient
          type: string
          enum: [recipe, ingredient]
        # info:
        #   type: object
        #   oneOf:
        #     - $ref: "#/components/schemas/Recipe"
        #     - $ref: "#/components/schemas/Ingredient"
        recipe:
          type: object
          $ref: "#/components/schemas/Recipe"
        ingredient:
          type: object
          $ref: "#/components/schemas/Ingredient"
        grams:
          description: weight in grams
          type: number
          format: double # float64
        amount:
          description: amount
          type: number
          format: double # float64
        unit:
          description: unit
          type: string
        adjective:
          description: adjective
          type: string
        optional:
          description: optional
          type: boolean
    SectionInstruction:
      description: Instructions in a single section
      type: object
      required:
        - id
        - instruction
      properties:
        id:
          description: UUID
          type: string
        instruction:
          description: instruction
          type: string
    RecipeSection:
      description: A step in the recipe
      type: object
      required:
        - id
        - minutes
        - instructions
        - ingredients
      properties:
        id:
          description: UUID
          type: string
        minutes:
          description: How many minutes the step takes, approximately (todo - make this a range)
          type: integer
          format: int64
        instructions:
          description: x
          type: array
          items:
            $ref: "#/components/schemas/SectionInstruction"
        ingredients:
          description: x
          type: array
          items:
            $ref: "#/components/schemas/SectionIngredient"
    RecipeDetail:
      description: A recipe with subcomponents
      type: object
      required:
        - sections
        - recipe
      properties:
        sections:
          description: sections of the recipe
          type: array
          items:
            $ref: "#/components/schemas/RecipeSection"
        recipe:
          description: The recipe
          $ref: "#/components/schemas/Recipe"
    Recipe:
      description: A recipe
      type: object
      required:
        - id
        - name
        - quantity
        - unit
      properties:
        id:
          description: UUID
          type: string
        name:
          description: recipe name
          type: string
        total_minutes:
          description: todo
          type: integer
          format: int64
        source:
          description: book or website? deprecated?
          type: string
        servings:
          description: num servings
          type: integer
          format: int64
        quantity:
          description: serving quantity
          type: integer
          format: int64
        unit:
          description: serving unit
          type: string
        # tag:
        # type: string
    Ingredient:
      description: "An Ingredient"
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: UUID
          type: string
        name:
          description: Ingredient name
          type: string
    IngredientDetail:
      description: "An Ingredient"
      type: object
      required:
        - ingredient
        # - recipes
        # - children
      properties:
        ingredient:
          description: the ingredient
          type: object
          $ref: "#/components/schemas/Ingredient"
        recipes:
          description: Recipes referencing this ingredient
          type: array
          items:
            $ref: "#/components/schemas/Recipe"
        children:
          description: Ingredients that are equivalent
          type: array
          items:
            $ref: "#/components/schemas/Ingredient"
    # Recipes:
    #   type: array
    #   items:
    #     $ref: "#/components/schemas/Recipe"
    GooglePhoto:
      description: A google photo
      type: object
      required:
        - id
        - base_url
        - created
      properties:
        id:
          description: id
          type: string
        base_url:
          description: public image
          type: string
        created:
          description: when it was taken
          type: string
          format: date-time
    Meal:
      description: A google photo
      type: object
      required:
        - id
        - name
        - ate_at
        - photos
      properties:
        id:
          description: id
          type: string
        name:
          description: public image
          type: string
        ate_at:
          description: when it was taken
          type: string
          format: date-time
        photos:
          type: array
          items:
            $ref: "#/components/schemas/GooglePhoto"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    List:
      type: object
      required:
        - page_number
        - limit
        - total_count
        - offset
        - page_count
      properties:
        page_number:
          description: What number page this is
          type: integer
        limit:
          description: How many items were requested for this page
          type: integer
        offset:
          description: todo
          type: integer
        total_count:
          description: Total number of items across all pages
          type: integer
        page_count:
          description: Total number of pages available
          type: integer

    PaginatedRecipes:
      type: object
      properties:
        recipes:
          type: array
          items:
            $ref: "#/components/schemas/Recipe"
        # data2:
        #   $ref: "#/components/schemas/Recipes"
        meta:
          $ref: "#/components/schemas/List"
    PaginatedIngredients:
      type: object
      properties:
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/IngredientDetail"
        meta:
          $ref: "#/components/schemas/List"
    PaginatedPhotos:
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: "#/components/schemas/GooglePhoto"
        meta:
          $ref: "#/components/schemas/List"
    PaginatedMeals:
      type: object
      properties:
        meals:
          type: array
          items:
            $ref: "#/components/schemas/Meal"
        meta:
          $ref: "#/components/schemas/List"
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
