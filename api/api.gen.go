// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Ingredient defines model for Ingredient.
type Ingredient struct {

	// Ingredients that are equivalent
	Children *[]Ingredient `json:"children,omitempty"`

	// UUID
	Id string `json:"id"`

	// Ingredient name
	Name string `json:"name"`

	// Recipes referencing this ingredient
	Recipes *[]Recipe `json:"recipes,omitempty"`
}

// List defines model for List.
type List struct {

	// How many items were requested for this page
	Limit int `json:"limit"`

	// todo
	Offset int `json:"offset"`

	// Total number of pages available
	PageCount int `json:"page_count"`

	// What number page this is
	PageNumber int `json:"page_number"`

	// Total number of items across all pages
	TotalCount int `json:"total_count"`
}

// PaginatedIngredients defines model for PaginatedIngredients.
type PaginatedIngredients struct {
	Ingredients *[]Ingredient `json:"ingredients,omitempty"`
	Meta        *List         `json:"meta,omitempty"`
}

// PaginatedRecipes defines model for PaginatedRecipes.
type PaginatedRecipes struct {
	Meta    *List     `json:"meta,omitempty"`
	Recipes *[]Recipe `json:"recipes,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {

	// UUID
	Id string `json:"id"`

	// recipe name
	Name string `json:"name"`

	// serving quantity
	Quantity int `json:"quantity"`

	// num servings
	Servings *int `json:"servings,omitempty"`

	// book or website? deprecated?
	Source *string `json:"source,omitempty"`

	// todo
	TotalMinutes *int `json:"total_minutes,omitempty"`

	// serving unit
	Unit string `json:"unit"`
}

// RecipeDetail defines model for RecipeDetail.
type RecipeDetail struct {

	// A recipe
	Recipe Recipe `json:"recipe"`

	// A step in the recipe
	Sections RecipeSection `json:"sections"`
}

// RecipeSection defines model for RecipeSection.
type RecipeSection struct {

	// UUID
	Id string `json:"id"`

	// x
	Ingredients []SectionIngredient `json:"ingredients"`

	// x
	Instructions []SectionInstruction `json:"instructions"`

	// How many minutes the step takes, approximately (todo - make this a range)
	Minutes int `json:"minutes"`
}

// SectionIngredient defines model for SectionIngredient.
type SectionIngredient struct {

	// weight in grams
	Grams *float32 `json:"grams,omitempty"`

	// UUID
	Id string `json:"id"`

	// An Ingredient
	Ingredient *Ingredient `json:"ingredient,omitempty"`

	// what kind of ingredient
	Kind string `json:"kind"`

	// A recipe
	Recipe *Recipe `json:"recipe,omitempty"`
}

// SectionInstruction defines model for SectionInstruction.
type SectionInstruction struct {

	// UUID
	Id string `json:"id"`

	// instruction
	Instruction string `json:"instruction"`
}

// LimitParam defines model for limitParam.
type LimitParam int

// OffsetParam defines model for offsetParam.
type OffsetParam int

// ListIngredientsParams defines parameters for ListIngredients.
type ListIngredientsParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// ListRecipesParams defines parameters for ListRecipes.
type ListRecipesParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/ingredients", wrapper.ListIngredients)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTY/bNhP+KwTf99ACymo3QS++BGkTJAs0RZAP9LBYBLQ0khlLpHY4stcN/N8LfujL",
	"or0ONgWC9rQrcziceeaZ4Qy/8kzXjVagyPDFV94IFDUQoPuqZC3pnf3JfuVgMpQNSa34gn9cAVNtvQQ0",
	"TBdMEtSGkWYI1KK64AmXVuyuBdzxhCtRA194jTzhJltBLbzWQrQV8cXTy4TX4l7Wbc0Xv9gPqfzHVcJp",
	"19jtUhGUgHy/T7guCgMPWzcxzqxlw5ZQaARmSCBJVdrfM11VkBGjFTAE01bEDNAxJ/zJEy96Wy8jtu47",
	"SQfqK0SNDmvUDSBJcD9nOgf7t9BYC/L7nz3lc3UJr8EYUTrpsGgIpSodLAh3rUTI+eLG6xzkb3tlevkF",
	"MrK6rlWJkEtQNAfxhWKj5eTQ4JWscgQ13zdsMoxWgphAYNasjai8JhcQu/H/CAVf8P+lAw3TgFU6Onvf",
	"Wy4Qxc5+y3x+8KdP1y8HxDpQurgdN5M5gchGhEw23t3p3vd+gSEUgKAyx6OVNEyOATvLTa9q7uJBLGXe",
	"ETAWxt+loTmnfLbNjH+jt6wWahfyYgtoWX/XgiHIWaHRu9JYzsT4F/g/00s619ENVtPnTLcxkn3UJKpR",
	"rlpZw8RGyEosKziuz2+ZK/zTMi7os4IhLiaqiezp55rm4RIZamOYqCpvK49Wp3HoxuYmfQkcH50MNWWE",
	"VSzQ70QplSDIR0k2D7ycLn6HdKuBxEMaHAn3+1NWvx8Samrx+fonWfnYDJtZGmTntZD5U2dl8PF1yCs+",
	"WoPuWqFI0m6+0QBubOHpJWIMD0KRGqbamvWr0a26xSxi8FLrNdPItrA0kuA5y6FByGx8n8c88EyvpWop",
	"VkuPlo1WxapX57VbTR64AYeqOQIyaL49Gv6XQEJWx0nAtpJWzLTLUfN0yAvsiXQeNQ1k9pQzyfzBS8/8",
	"7bV0WXLCy05HxE1D0DCpQj/0aN4flKPppvtzL8pg7wNtgTKE7QDlY8/qtUWL4jFK9zdskHBAOlBJrMEk",
	"TDQN6ntZC4Jqx36yKcCesFqsw3UlGApVws8PXy6O4Z0hB/5PkY8xYY7pyW5OKiaYkaqsgAWqzYhRoqgj",
	"kGxBliuyGrxAb0y4GL+xpZMTi8+/19ZSRU7Z2p7BLrlrftzCgbJd/Q3vs2C0enu0Yzw37WOxdBaejNXA",
	"yUiwhvCfFa1vw/zEyePFs6ryeMPc3b07r9C+jc1AGQdqmMDeXn90+Sipsp+vdYs586Cyl4LEUhgbqw2g",
	"8dZdXVxeXLretQElGskX/Jn7yTZctHJQpAdlqvQ9rkVLOOBzvnCN9rj1SiYj80087INIOp5a98mD4qMJ",
	"fH9rQTSNVsaH7unlpR8cFYU0EE1TycwZm34xPkrDjHqKkNG20gXh8GpwLfUkS8LEbLFYgcjD28H9EwX3",
	"saGSVVKt7dBta6KV6VUO3o1H60MqeaPCo8F3ct/P5BF/WwX3DWR2LoIgk3DT1rXAXWCDmwTkBLaEp6Me",
	"9SiPumb438ahzq+j/MmZu0J9zDsM/rPcGSAgYfv0m37AubWzrjYR+vyGIAgGAh0E9eq7edffVDP3/oBt",
	"tWOZMyTvusQfCF8Pke2kuqt7Du8oU9Ov/p/PMt8fzdrXEJL21911Ps/b+RukdB3F0EaHF1KUsIHuddFe",
	"QMPjYm8FH9+ZhC2cIvY/mdeTmSgSh1ddFDoLrJOCbUQl8+5d6UcixrUqtHvlEsw0kMlCZic5EoboLsgt",
	"VnzBV0SNWaTpRiL51QuzFWUJuGqXF5muUyWz9c5ADeovkRpj0qvQcEyN/eB3vWmX7MW7a/aiJc3e6mzt",
	"e67xcYs0LbTOL8aK3Um2n9nf7v8OAAD//1P7rSHMFwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
