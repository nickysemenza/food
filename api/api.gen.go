// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Ingredient defines model for Ingredient.
type Ingredient struct {

	// Ingredients that are equivalent
	Children *[]Ingredient `json:"children,omitempty"`

	// UUID
	Id string `json:"id"`

	// Ingredient name
	Name string `json:"name"`

	// Recipes referencing this ingredient
	Recipes *[]Recipe `json:"recipes,omitempty"`
}

// List defines model for List.
type List struct {

	// How many items were requested for this page
	Limit int `json:"limit"`

	// todo
	Offset int `json:"offset"`

	// What number page this is
	PageNumber int `json:"page_number"`

	// Total number of items across all pages
	TotalCount int `json:"total_count"`
}

// PaginatedIngredients defines model for PaginatedIngredients.
type PaginatedIngredients struct {
	Ingredients *[]Ingredient `json:"ingredients,omitempty"`
	Meta        *List         `json:"meta,omitempty"`
}

// PaginatedRecipes defines model for PaginatedRecipes.
type PaginatedRecipes struct {
	Meta    *List     `json:"meta,omitempty"`
	Recipes *[]Recipe `json:"recipes,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {

	// UUID
	Id string `json:"id"`

	// recipe name
	Name string `json:"name"`

	// serving quantity
	Quantity int `json:"quantity"`

	// num servings
	Servings *int `json:"servings,omitempty"`

	// book or website? deprecated?
	Source *string `json:"source,omitempty"`

	// todo
	TotalMinutes *int `json:"total_minutes,omitempty"`

	// serving unit
	Unit string `json:"unit"`
}

// RecipeDetail defines model for RecipeDetail.
type RecipeDetail struct {

	// A recipe
	Recipe Recipe `json:"recipe"`

	// A step in the recipe
	Sections RecipeSection `json:"sections"`
}

// RecipeSection defines model for RecipeSection.
type RecipeSection struct {

	// UUID
	Id string `json:"id"`

	// x
	Ingredients []SectionIngredient `json:"ingredients"`

	// x
	Instructions []SectionInstruction `json:"instructions"`

	// How many minutes the step takes, approximately (todo - make this a range)
	Minutes int `json:"minutes"`
}

// SectionIngredient defines model for SectionIngredient.
type SectionIngredient struct {

	// weight in grams
	Grams *float32 `json:"grams,omitempty"`

	// UUID
	Id string `json:"id"`

	// An Ingredient
	Ingredient *Ingredient `json:"ingredient,omitempty"`

	// what kind of ingredient
	Kind string `json:"kind"`

	// A recipe
	Recipe *Recipe `json:"recipe,omitempty"`
}

// SectionInstruction defines model for SectionInstruction.
type SectionInstruction struct {

	// UUID
	Id string `json:"id"`

	// instruction
	Instruction string `json:"instruction"`
}

// LimitParam defines model for limitParam.
type LimitParam int

// OffsetParam defines model for offsetParam.
type OffsetParam int

// ListIngredientsParams defines parameters for ListIngredients.
type ListIngredientsParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// ListRecipesParams defines parameters for ListRecipes.
type ListRecipesParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameter("simple", false, "recipe_id", ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/ingredients", wrapper.ListIngredients)
	router.GET("/recipes", wrapper.ListRecipes)
	router.POST("/recipes", wrapper.CreateRecipes)
	router.GET("/recipes/:recipe_id", wrapper.GetRecipeById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY227cNhN+FYL/f9ECimUn6M3eBGkTJAaaIsgBvTCMgCuNtMxKpDwceb0N9t0LHnRa",
	"cQ+BUyBor2wth8OZb77hzPArz3TdaAWKDF985Y1AUQMBuq9K1pLe2Z/sVw4mQ9mQ1Iov+McVMNXWS0DD",
	"dMEkQW0YaYZALaoLnnBpxe5awC1PuBI18IXXyBNushXUwmstRFsRXzy9THgtHmTd1nzxi/2Qyn9cJZy2",
	"jd0uFUEJyHe7hOuiMHDauolxZi0btoRCIzBDAkmq0v6e6aqCjBitgCGYtiJmgA454U+eeNHbehmxdddJ",
	"OlBfIWp0WKNuAEmC+znTOdi/hcZakN//7Cmfq0t4DcaI0kmHRUMoVelgQbhrJULOFzde5yB/2yvTyy+Q",
	"kdV1rUqEXIKiOYgvFBstJ/sGr2SVI6j5vmGTYbQSxAQCs2bdi8prcgGxG/+PUPAF/1860DANWKWjs3e9",
	"5QJRbO23zOcHf/p0/XJArAOli9thM5kTiGxEyGTj3Z3ufe8XGEIBCCpzPFpJw+QYsLPc9KrmLu7FUuYd",
	"AWNh/F0amnPKZ9vM+Dd6w2qhtiEvNoCW9XctGIKcFRq9K43lTIx/gf8zvaRzHd1gNX326Tjf9adlSMhV",
	"KxhwNFFNpElUnzPdxvj60S7O0l5kqI1hoqqc+pjePajH5ib9lTU+uscgFot3opRKEOSjPJjHRk4Xv0NG",
	"1EDilAbHk93umNXvB85PLT5f/yRxHpsEM0uD7Py6Yv7U2U31+KvCKz54Tdy1QpGk7XyjAby3d0MvESN1",
	"EIpcM6qtWb8a3apbzCIGL7VeM41sA0sjCZ6zHBqEzMb3ecwDT+5aqpZi193BzG5V7ILpvHaryYkiNVxs",
	"IyCD5tuD4X8JJGR1mARsI2nFTLsc9Tf7vMCeSOdR00BmTzmTzB+89MzfXkuXJUe87HRE3DQEDZMqtCyP",
	"5v3edTTd9HBuLQv2nqjcyhC2A5SPPavXFr0UD1G6L4JBwgHpQCWxBpMw0TSoH2QtCKot+8mmAHvCarEO",
	"FUowFKqEn0/XE8fwzpA9/6fIx5gwx/RowyUVE8xIVVbAAtVmxChR1BFINiDLFVkNXqA3JtTCb+y65MTi",
	"8+vaWqrIKRvbJtglV9nHXRYo23jf8D4LRqu3B5u6c9M+Fktn4dFYDZyMBGsI/1nR+jbMj5w8XjzrVh5v",
	"mLu7c+cV2neaGSjjQA1D0tvrjy4fJVX287VuMWceVPZSkFgKY2N1D2i8dVcXlxeXrr1sQIlG8gV/5n6y",
	"/SOtHBTp3jVV+jbUoiUc8DlfuF543Holk6n2Jh72QSQdD5a75KT4aEje3VoQTaOV8aF7ennpZztFIQ1E",
	"01Qyc8amX4yP0jBGHiNktK10QdgvDa6LnmRJGGotFisQeRjvH54oeIjNfaySam3nYnsnWple5eDdePrd",
	"p5I3Ksz138l9PzZH/G0VPDSQ2dEFgkzCTVvXAreBDa75lxPYEp6OetSDPOqa4X8bhzq/DvInZ66E+ph3",
	"GPxnuTNAQML26Tf9gHNrx1ttIvT5DUEQDATaC+rVd/Our1Qz9/6ATbVlmTMk77rEHwhfD5HtpLrSPYd3",
	"lKnpV//PZ5nvDmbtawhJ++v2Op/n7fyZULqOYmijwyMmSriH7gHQFqDh/a+3go9rJmELx4j9T+b1ZCaK",
	"xOFVF4XOAuukYPeiknn39PMjEeNaFdo9RAlmGshkIbOjHAlDdBfkFiu+4CuixizS9F4i+dULsxFlCbhq",
	"lxeZrlMls/XWQA3qL5EaY9Kr0HBMjf3gd71pl+zFu2v2oiXN3ups7Xuu8XGLNC20zi/Git1Jtp/Z3e7+",
	"DgAA//9xHyDdbxcAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
