# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.2
jobs:
  build_backend:
    docker:
      # specify the version
      - image: circleci/golang:1.13
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: food
          POSTGRES_DB: food
    working_directory: ~/work/
    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved
      DB_PORT: "5432"
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          command: go mod vendor
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          command: make bin/migrate && ./bin/migrate -source file://migrations -database postgres://food@localhost:5432/food?sslmode=disable up
      - run:
          command: |
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES
          # environment:
          # DB_PORT: 5432
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results

      - run:
          name: "Create a temp directory for artifacts"
          command: |
            mkdir -p /tmp/artifacts
      - run:
          command: |
            go test ./... -coverprofile=c.out
            go tool cover -html=c.out -o coverage.html
            mv coverage.html /tmp/artifacts
            mv c.out /tmp/artifacts

      - codecov/upload:
          file: /tmp/artifacts/c.out
      - store_artifacts:
          path: /tmp/artifacts
  build_ui:
    docker:
      - image: node:13
    working_directory: ~/work
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "ui/yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
          working_directory: ./ui
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "ui/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: test
          command: yarn coverage:unit
          working_directory: ./ui
      - codecov/upload:
          file: ui/coverage/unit/coverage-final.json
      - store_artifacts:
          path: ui/coverage
          destination: raw-ui-unit-test-coverage
  test_e2e:
    machine:
      docker_layer_caching: false
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          command: docker-compose build
          no_output_timeout: 3m
      - run:
          command: docker-compose run ui
          no_output_timeout: 3m
      - codecov/upload:
          file: ui/coverage/coverage-final.json
      - store_artifacts:
          path: ui/coverage
          destination: raw-ui-e2e-test-coverage
      - store_artifacts:
          path: ui/cypress
          destination: raw-ui-e2e-test-cypress
  test_cli:
    working_directory: ~/work
    docker:
      - image: rust:1
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
          working_directory: ./cli
      - restore_cache:
          keys:
            - v4-cargo-cache-{{ arch }}-{{ checksum "cli/Cargo.lock" }}
      - run:
          name: Build all targets
          command: cargo build --all --all-targets
          working_directory: ./cli
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - cli/target/debug/.fingerprint
            - cli/target/debug/build
            - cli/target/debug/deps
          key: v4-cargo-cache-{{ arch }}-{{ checksum "cli/Cargo.lock" }}
      - run:
          name: Run all tests
          command: cargo test --all
          working_directory: ./cli
      # - run:
      #     name: Coverage
      #     working_directory: ./cli
      #     command: |
      #       # install kcov
      #       cargo install cargo-kcov
      #       cargo kcov --print-install-kcov-sh | bash
      #       echo "Install kcov successfully"
      #       # coverage
      #       cargo kcov --all -v
      #       bash <(curl -s https://codecov.io/bash)
      #       echo "Upload code coverage successfully"
workflows:
  version: 2
  build_fullstack:
    jobs:
      - build_ui
      - build_backend
      - test_e2e
      - test_cli
