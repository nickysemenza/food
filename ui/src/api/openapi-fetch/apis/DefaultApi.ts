/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthResp,
    AuthRespFromJSON,
    AuthRespToJSON,
    PaginatedIngredients,
    PaginatedIngredientsFromJSON,
    PaginatedIngredientsToJSON,
    PaginatedMeals,
    PaginatedMealsFromJSON,
    PaginatedMealsToJSON,
    PaginatedPhotos,
    PaginatedPhotosFromJSON,
    PaginatedPhotosToJSON,
} from '../models';

export interface AuthLoginRequest {
    code: string;
}

export interface ListIngredientsRequest {
    offset?: number;
    limit?: number;
}

export interface ListMealsRequest {
    offset?: number;
    limit?: number;
}

export interface ListPhotosRequest {
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Login
     */
    async authLoginRaw(requestParameters: AuthLoginRequest): Promise<runtime.ApiResponse<AuthResp>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling authLogin.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthRespFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async authLogin(requestParameters: AuthLoginRequest): Promise<AuthResp> {
        const response = await this.authLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all ingredients
     */
    async listIngredientsRaw(requestParameters: ListIngredientsRequest): Promise<runtime.ApiResponse<PaginatedIngredients>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedIngredientsFromJSON(jsonValue));
    }

    /**
     * List all ingredients
     */
    async listIngredients(requestParameters: ListIngredientsRequest): Promise<PaginatedIngredients> {
        const response = await this.listIngredientsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all meals
     */
    async listMealsRaw(requestParameters: ListMealsRequest): Promise<runtime.ApiResponse<PaginatedMeals>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/meals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMealsFromJSON(jsonValue));
    }

    /**
     * List all meals
     */
    async listMeals(requestParameters: ListMealsRequest): Promise<PaginatedMeals> {
        const response = await this.listMealsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all photos
     */
    async listPhotosRaw(requestParameters: ListPhotosRequest): Promise<runtime.ApiResponse<PaginatedPhotos>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/photos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPhotosFromJSON(jsonValue));
    }

    /**
     * List all photos
     */
    async listPhotos(requestParameters: ListPhotosRequest): Promise<PaginatedPhotos> {
        const response = await this.listPhotosRaw(requestParameters);
        return await response.value();
    }

}
