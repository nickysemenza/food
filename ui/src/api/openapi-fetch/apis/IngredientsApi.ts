/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Ingredient,
    IngredientFromJSON,
    IngredientToJSON,
} from '../models';

export interface CreateIngredientsRequest {
    ingredient: Ingredient;
}

/**
 * 
 */
export class IngredientsApi extends runtime.BaseAPI {

    /**
     * Create a ingredient
     */
    async createIngredientsRaw(requestParameters: CreateIngredientsRequest): Promise<runtime.ApiResponse<Ingredient>> {
        if (requestParameters.ingredient === null || requestParameters.ingredient === undefined) {
            throw new runtime.RequiredError('ingredient','Required parameter requestParameters.ingredient was null or undefined when calling createIngredients.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IngredientToJSON(requestParameters.ingredient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientFromJSON(jsonValue));
    }

    /**
     * Create a ingredient
     */
    async createIngredients(requestParameters: CreateIngredientsRequest): Promise<Ingredient> {
        const response = await this.createIngredientsRaw(requestParameters);
        return await response.value();
    }

}
