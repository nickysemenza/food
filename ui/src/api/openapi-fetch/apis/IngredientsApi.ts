/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Ingredient,
    IngredientFromJSON,
    IngredientToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    PaginatedIngredients,
    PaginatedIngredientsFromJSON,
    PaginatedIngredientsToJSON,
    RecipeDetail,
    RecipeDetailFromJSON,
    RecipeDetailToJSON,
    SearchResult,
    SearchResultFromJSON,
    SearchResultToJSON,
} from '../models';

export interface IngredientsApiConvertIngredientToRecipeRequest {
    ingredientId: string;
}

export interface IngredientsApiCreateIngredientsRequest {
    ingredient: Ingredient;
}

export interface IngredientsApiListIngredientsRequest {
    offset?: number;
    limit?: number;
}

export interface IngredientsApiMergeIngredientsRequest {
    ingredientId: string;
    inlineObject: InlineObject;
}

export interface IngredientsApiSearchRequest {
    name: string;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class IngredientsApi extends runtime.BaseAPI {

    /**
     * todo
     * Converts an ingredient to a recipe, updating all recipes depending on it.
     */
    async convertIngredientToRecipeRaw(requestParameters: IngredientsApiConvertIngredientToRecipeRequest): Promise<runtime.ApiResponse<RecipeDetail>> {
        if (requestParameters.ingredientId === null || requestParameters.ingredientId === undefined) {
            throw new runtime.RequiredError('ingredientId','Required parameter requestParameters.ingredientId was null or undefined when calling convertIngredientToRecipe.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients/{ingredient_id}/convert_to_recipe`.replace(`{${"ingredient_id"}}`, encodeURIComponent(String(requestParameters.ingredientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDetailFromJSON(jsonValue));
    }

    /**
     * todo
     * Converts an ingredient to a recipe, updating all recipes depending on it.
     */
    async convertIngredientToRecipe(requestParameters: IngredientsApiConvertIngredientToRecipeRequest): Promise<RecipeDetail> {
        const response = await this.convertIngredientToRecipeRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * Create a ingredient
     */
    async createIngredientsRaw(requestParameters: IngredientsApiCreateIngredientsRequest): Promise<runtime.ApiResponse<Ingredient>> {
        if (requestParameters.ingredient === null || requestParameters.ingredient === undefined) {
            throw new runtime.RequiredError('ingredient','Required parameter requestParameters.ingredient was null or undefined when calling createIngredients.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IngredientToJSON(requestParameters.ingredient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientFromJSON(jsonValue));
    }

    /**
     * todo
     * Create a ingredient
     */
    async createIngredients(requestParameters: IngredientsApiCreateIngredientsRequest): Promise<Ingredient> {
        const response = await this.createIngredientsRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * List all ingredients
     */
    async listIngredientsRaw(requestParameters: IngredientsApiListIngredientsRequest): Promise<runtime.ApiResponse<PaginatedIngredients>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedIngredientsFromJSON(jsonValue));
    }

    /**
     * todo
     * List all ingredients
     */
    async listIngredients(requestParameters: IngredientsApiListIngredientsRequest): Promise<PaginatedIngredients> {
        const response = await this.listIngredientsRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * Merges the provide ingredients in the body into the param
     */
    async mergeIngredientsRaw(requestParameters: IngredientsApiMergeIngredientsRequest): Promise<runtime.ApiResponse<Ingredient>> {
        if (requestParameters.ingredientId === null || requestParameters.ingredientId === undefined) {
            throw new runtime.RequiredError('ingredientId','Required parameter requestParameters.ingredientId was null or undefined when calling mergeIngredients.');
        }

        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling mergeIngredients.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients/{ingredient_id}/merge`.replace(`{${"ingredient_id"}}`, encodeURIComponent(String(requestParameters.ingredientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientFromJSON(jsonValue));
    }

    /**
     * todo
     * Merges the provide ingredients in the body into the param
     */
    async mergeIngredients(requestParameters: IngredientsApiMergeIngredientsRequest): Promise<Ingredient> {
        const response = await this.mergeIngredientsRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * Search recipes and ingredients
     */
    async searchRaw(requestParameters: IngredientsApiSearchRequest): Promise<runtime.ApiResponse<SearchResult>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling search.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultFromJSON(jsonValue));
    }

    /**
     * todo
     * Search recipes and ingredients
     */
    async search(requestParameters: IngredientsApiSearchRequest): Promise<SearchResult> {
        const response = await this.searchRaw(requestParameters);
        return await response.value();
    }

}
